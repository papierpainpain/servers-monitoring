version: "3.3"

networks:
  cloud-public:
    external: true
  cloud-camembert:
  cloud-monitoring:

volumes:
  prometheus: {}
  grafana: {}

configs:
  prometheus-config:
    file: prometheus/prometheus.yml

services:
  dockerproxy:
    image: tecnativa/docker-socket-proxy
    environment:
      - CONTAINERS=1
      - EXEC=1
      - IMAGES=1
      - INFO=1
      - NETWORKS=1
      - NODES=1
      - SERVICES=1
      - SWARM=1
      - SYSTEM=1
      - TASKS=1
      - VOLUMES=1
    networks:
      - cloud-monitoring
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /etc/machine-id:/etc/machine-id:ro
    privileged: true # TODO: Ne sert à rien dans swarm (pour l'instant), MR en cours chez Docker (peut-être pour jamais)
    # devices: # TODO: Attendre la prochaine release de Docker pour avoir accès à kmsg pour raspi 4
    #   - /dev/kmsg:/dev/kmsg
    networks:
      - cloud-monitoring
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        prometheus-job: cadvisor

  nodeexporter:
    image: prom/node-exporter:v1.6.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - cloud-monitoring

  prometheus:
    image: prom/prometheus:v2.46.0
    networks:
      - cloud-camembert
      - cloud-monitoring
      - cloud-public # TODO: Remove this
    volumes:
      - prometheus:/prometheus
    configs:
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  grafana:
    image: ${GRAFANA_IMAGE}
    networks:
      - cloud-camembert
      - cloud-public
    volumes:
      - grafana:/var/lib/grafana
    environment:
      - GF_DEFAULT_INSTANCE_NAME=Camembert
      - GF_AUTH_LDAP_ENABLED=true
      - GF_AUTH_LDAP_CONFIG_FILE=/etc/grafana/ldap.toml
      - GF_AUTH_LDAP_ALLOW_SIGN_UP=true
      - LDAP_HOST=${LDAP_HOST}
      - LDAP_BIND_DN=${LDAP_ADMIN_USER}
      - LDAP_BIND_PASSWORD=${LDAP_ADMIN_PASS}
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/general/swarm.json
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=cloud-public
        - traefik.constraint-label=cloud-public

        ## HTTP ##
        - traefik.http.routers.monitoring.entrypoints=web
        - traefik.http.routers.monitoring.rule=Host(`${DOMAIN?Variable not set}`)
        - traefik.http.routers.monitoring.middlewares=monitoring-redirect
        # middlewares
        - traefik.http.middlewares.monitoring-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.monitoring-redirect.redirectscheme.permanent=true

        ## HTTPS ##
        - traefik.http.routers.monitoring-https.entrypoints=websecure
        - traefik.http.routers.monitoring-https.rule=Host(`${DOMAIN?Variable not set}`)
        - traefik.http.routers.monitoring-https.tls=true
        - traefik.http.routers.monitoring-https.tls.certresolver=letsencrypt
        - traefik.http.routers.monitoring-https.tls.options=default

        ## LOADBALANCER ##
        - traefik.http.services.monitoring-https.loadbalancer.server.port=3000
